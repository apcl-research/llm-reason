<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/31086796.java">    <function><type><specifier>protected</specifier> <name>String</name></type> <name>toPrintable</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>notPrintable</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>StringBuffer</name></type> <name>printable</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>(<argument><expr><call><name><name>notPrintable</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>notPrintable</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
	    <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name><name>notPrintable</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><literal type="char">'\n'</literal></expr>:</case> <expr_stmt><expr><call><name><name>printable</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
		<case>case <expr><literal type="char">'\t'</literal></expr>:</case> <expr_stmt><expr><call><name><name>printable</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
		<default>default:</default> <expr_stmt><expr><call><name><name>printable</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
	    </block_content>}</block></switch>
	</block_content>}</block></for>

	<return>return <expr><call><name><name>printable</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
</unit>
