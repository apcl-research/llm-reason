<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/43746883.java">        <function><type><specifier>private</specifier> <name>Path</name></type> <name>makeFollowPath</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>steps</name></decl></parameter>)</parameter_list> <block>{<block_content>
        	
        	<comment type="line">// TODO Use order-2 beziers instead</comment>
            <decl_stmt><decl><type><name>Path</name></type> <name>p</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>moveTo</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>steps</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>lineTo</name></name><argument_list>(<argument><expr><name>i</name><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator> <name>steps</name></expr></argument>, <argument><expr><literal type="number">0.2f</literal> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>p</name></expr>;</return>
        </block_content>}</block></function>
</unit>
