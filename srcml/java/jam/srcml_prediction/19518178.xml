<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/19509091.java">	<function><type><specifier>public</specifier> <name>void</name></type> <name>extract</name><parameter_list>(<parameter><decl><type><name>IPOSequent</name></type> <name>sequent</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RodinDBException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><specifier>final</specifier> <name>IInternalElement</name></type> <name>root</name> <init>= <expr><call><name><name>sequent</name><operator>.</operator><name>getRoot</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>root</name> <operator>instanceof</operator> <name>IPORoot</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><specifier>final</specifier> <name>IProofComponent</name></type> <name>pc</name> <init>= <expr><call><name><name>pm</name><operator>.</operator><name>getProofComponent</name></name><argument_list>(<argument><expr><operator>(</operator><name>IPORoot</name><operator>)</operator> <name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>final</specifier> <name>IProofTree</name></type> <name>proofTree</name> <init>= <expr><call><name>getProofTree</name><argument_list>(<argument><expr><name>sequent</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>proofTree</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>IProofTreeNode</name></type> <name>ptNode</name> <init>= <expr><call><name><name>proofTree</name><operator>.</operator><name>getRoot</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if <condition>(<expr><name>ptNode</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name><name>listPtNode</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>ptNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>
</unit>
