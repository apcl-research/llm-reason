<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/31464029.java">    <function><type><specifier>protected</specifier> <name>void</name></type> <name>printBlocking</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>format</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>boolean</name></type> <name>inCommand</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>format</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
	    <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name><name>format</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	    <if_stmt><if>if <condition>(<expr><name>inCommand</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>inCommand</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
		    <case>case <expr><literal type="char">'%'</literal></expr>:</case>
			<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
			    
		    <case>case <expr><literal type="char">'i'</literal></expr>:</case> <comment type="line">// append the indent</comment>
			<expr_stmt><expr><call><name>indent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
			    
		    <default>default:</default>
			<break>break;</break>
		</block_content>}</block></switch>
	    </block_content>}</block></if>
	    <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
    </block_content>}</block></function>
</unit>
