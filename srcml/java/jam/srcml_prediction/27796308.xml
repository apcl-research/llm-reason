<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/31491596.java">    <function><type><specifier>protected</specifier> <name>void</name></type> <name>fireStateChanged</name><parameter_list>(<parameter><decl><type><name>byte</name></type> <name>type</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument></throws><block>{<block_content>
	<decl_stmt><decl><type><name>List</name></type> <name>notifyEvents</name> <init>= <expr><call><name>getListenerList</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    
        <comment type="line">// Process the listeners last to first, notifying</comment>
        <comment type="line">// those that are interested in this event</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>notifyEvents</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
	    <decl_stmt><decl><type><name>ChangeListener</name></type> <name>listener</name> <init>= <expr><operator>(</operator><name>ChangeListener</name><operator>)</operator> <call><name><name>notifyEvents</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <comment type="line">// Lazily create the event:</comment>
	    <if_stmt><if>if <condition>(<expr><name>changeEvent</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>changeEvent</name> <operator>=</operator> <operator>new</operator> <call><name>ChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    <expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>stateChanged</name></name><argument_list>(<argument><expr><name>changeEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>
</unit>
