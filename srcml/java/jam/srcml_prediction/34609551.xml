<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/12492783.java">    <function><type><specifier>protected</specifier> <name>CoderResult</name></type> <name>decodeLoop</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ByteBuffer</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>CharBuffer</name></type> <name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DynamicCharset</name></type> <name>cs</name> <init>= <expr><operator>(</operator><name>DynamicCharset</name><operator>)</operator> <call><name>charset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>in</name><operator>.</operator><name>remaining</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>out</name><operator>.</operator><name>remaining</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name><name>CoderResult</name><operator>.</operator><name>OVERFLOW</name></name></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>cs</name><operator>.</operator><name>fastDecode</name></name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>
        <return>return <expr><name><name>CoderResult</name><operator>.</operator><name>UNDERFLOW</name></name></expr>;</return>
    </block_content>}</block></function>
</unit>
