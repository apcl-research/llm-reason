<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/38452983.java">    <function><type><specifier>public</specifier> <name>Object</name></type> <name>getValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>clientObject</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Object</name></type> <name>back</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>clientObject</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>bFailure</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>descriptor</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>initDescriptor</name><argument_list>(<argument><expr><call><name><name>clientObject</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>bFailure</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

        <try>try <block>{<block_content>
            <expr_stmt><expr><name>back</name> <operator>=</operator> <call><name><name>descriptor</name><operator>.</operator><name>getReadMethod</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>invoke</name><argument_list>(<argument><expr><name>clientObject</name></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>bFailure</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

            <return>return <expr><name>FAILURE</name></expr>;</return>
        </block_content>}</block></catch></try>

        <return>return <expr><name>back</name></expr>;</return>
    </block_content>}</block></function>
</unit>
