<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/31151662.java">   <function><type><specifier>static</specifier> <specifier>public</specifier> <name>String</name></type> <name>substitute</name><parameter_list>( <parameter><decl><type><name>String</name></type> <name>original</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>match</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>subst</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><name>original</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <operator>(</operator><name>pos</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>indexOf</name></name><argument_list>( <argument><expr><name>match</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>StringBuffer</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>( <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>sb</name><operator>.</operator><name>replace</name></name><argument_list>( <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <call><name><name>match</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>subst</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>s</name></expr>;</return>
  </block_content>}</block></function>
</unit>
