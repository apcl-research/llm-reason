<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/10963286.java">    <function><type><specifier>public</specifier> <name>Byte</name></type> <name>convert</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>Locale</name></type> <name>locale</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConversionException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Byte</name></type> <name>value</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>input</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><literal type="string">""</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name><name>Byte</name><operator>.</operator><name>parseByte</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConversionException</name><argument_list>(<argument><expr><literal type="string">"Could not convert "</literal> <operator>+</operator> <name>input</name> <operator>+</operator> <literal type="string">" into a Byte object"</literal></expr></argument>, <argument><expr><call><name><name>ex</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>value</name></expr>;</return>
    </block_content>}</block></function>
</unit>
