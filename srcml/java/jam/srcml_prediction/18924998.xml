<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/14449983.java">  <function><type><specifier>public</specifier> <name>PopUp</name></type> <name>getPopUp0</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>PopUp</name></type> <name>p</name> <init>= <expr><operator>new</operator> <call><name>PopUp</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setLabel</name></name><argument_list>(<argument><expr><literal type="string">"popup 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>List</name></type> <name>items</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>addItems</name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>Iterator</name></type> <name>it</name> <init>= <expr><call><name><name>items</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>it</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>Item</name></type> <name>item</name> <init>= <expr><operator>(</operator><name>Item</name><operator>)</operator> <call><name><name>it</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>addItem</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>p</name></expr>;</return>
  </block_content>}</block></function>
</unit>
