<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/37081383.java">    <function><type><specifier>private</specifier> <name>void</name></type> <name>refreshSequenceRenderer</name><parameter_list>()</parameter_list><block>{<block_content>
      <try>try<block>{<block_content>
        <expr_stmt><expr><call><name><name>multi</name><operator>.</operator><name>clearRenderers</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>multi</name><operator>.</operator><name>addRenderer</name></name><argument_list>( <argument><expr><name>trace_renderer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<comment type="line">//        multi.removeRenderer(ruler);</comment>
<comment type="line">//        multi.removeRenderer(seqRenderer);</comment>
        <expr_stmt><expr><name>seqRenderer</name> <operator>=</operator> <operator>new</operator> <call><name>MySymbolSequenceRenderer</name><argument_list>(<argument><expr><name>lowerCaseSequence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>multi</name><operator>.</operator><name>addRenderer</name></name><argument_list>( <argument><expr><name>seqRenderer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ruler</name> <operator>=</operator> <operator>new</operator> <call><name>RulerRenderer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>multi</name><operator>.</operator><name>addRenderer</name></name><argument_list>( <argument><expr><name>ruler</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block>
      <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list><block>{<block_content>
        <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></function>
</unit>
