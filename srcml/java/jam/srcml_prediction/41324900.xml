<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/12532983.java">	<function><type><specifier>public</specifier> <name>double</name></type> <name>getScoreFor</name><parameter_list>(<parameter><decl><type><name>C</name></type> <name>aC</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<try>try <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>theScore</name></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><call><name><name>itsObjectToRankMap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>aC</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>theScore</name> <operator>=</operator> <call><name><name>itsSortedRankToScoreMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>itsObjectToRankMap</name>
						<operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>aC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>theScore</name> <operator>=</operator> <call><name>nextScore</name><argument_list>(<argument><expr><call><name><name>itsSortedScoreToObjectMap</name><operator>.</operator><name>lastKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<return>return <expr><call><name>getDoubleScore</name><argument_list>(<argument><expr><name>theScore</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"*****************WARNING**************"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></catch></try>
	</block_content>}</block></function>
</unit>
