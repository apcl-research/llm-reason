<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/42579983.java">	<function><type><specifier>public</specifier> <name>int</name></type> <name>getMaxScore</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>current</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>)</parameter_list><block>{<block_content>
		<comment type="line">//found a terminal node go no further</comment>
		<if_stmt><if>if<condition>(<expr><call><name><name>current</name><operator>.</operator><name>getNextNodeSize</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>depth</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name><name>current</name><operator>.</operator><name>getScore</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		
		<comment type="line">//loop for the largest score</comment>
		<for>for<control>(<init><decl><type><name>Node</name></type> <name>child</name><range>: <expr><call><name><name>current</name><operator>.</operator><name>getListOfNextNodes</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block>{<block_content>
			<expr_stmt><expr><name>alpha</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>alpha</name></expr></argument>, <argument><expr><call><name>getMinScore</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>depth</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>alpha</name> <operator>&gt;=</operator> <name>beta</name></expr>)</condition><block>{<block_content>
				<return>return <expr><name>alpha</name></expr>;</return>
			</block_content>}</block></if></if_stmt>			
		</block_content>}</block></for>
		
		<return>return <expr><name>alpha</name></expr>;</return>
	</block_content>}</block></function>	
</unit>
