<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/32761849.java">    <function><type><specifier>private</specifier> <name>void</name></type> <name>createAuxiliarList</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<comment type="line">//Clears the list</comment>
	<expr_stmt><expr><call><name><name>auxiliarList</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Building the list</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>listNumber</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	    <decl_stmt><decl><type><name>Variable</name></type> <name>aux1</name> <init>= <expr><operator>(</operator><name>Variable</name><operator>)</operator> <call><name><name>constList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>Variable</name></type> <name>aux2</name> <init>= <expr><operator>(</operator><name>Variable</name><operator>)</operator> <call><name><name>varList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>Variable</name></type> <name>diff</name> <init>= <expr><operator>new</operator> <call><name>Variable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	    <expr_stmt><expr><call><name><name>diff</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><call><name><name>aux1</name><operator>.</operator><name>value</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>aux2</name><operator>.</operator><name>value</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name><name>auxiliarList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>
</unit>
