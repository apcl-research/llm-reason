<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/17592783.java">    <function><type><specifier>private</specifier> <name>void</name></type> <name>addRetPhi</name><parameter_list>(<parameter><decl><type><name>Subroutine</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>Block</name></type> <name>block</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>proto</name><index>[<expr><call><name><name>cfg</name><operator>.</operator><name>preOrderIndex</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>VarExpr</name></type> <name>target</name> <init>= <expr><operator>(</operator><name>VarExpr</name><operator>)</operator> <call><name><name>prototype</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>PhiReturnStmt</name></type> <name>phi</name> <init>= <expr><operator>new</operator> <call><name>PhiReturnStmt</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>phiis</name><index>[<expr><call><name><name>cfg</name><operator>.</operator><name>preOrderIndex</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>phi</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>SSA</name><operator>.</operator><name>DEBUG</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"  place "</literal> <operator>+</operator> <name>phi</name> <operator>+</operator> <literal type="string">" in "</literal> <operator>+</operator> <name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
</unit>
