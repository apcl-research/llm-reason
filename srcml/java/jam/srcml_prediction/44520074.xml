<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/37242783.java">    <function><type><specifier>public</specifier> <name>void</name></type> <name>print2File</name><parameter_list>()</parameter_list><block>{<block_content>
	<try>try<block>{<block_content>
		<decl_stmt><decl><type><name>PrintWriter</name></type> <name>fileOut</name> <init>= <expr><operator>new</operator> <call><name>PrintWriter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileWriter</name><argument_list>(<argument><expr><name>pdbID</name><operator>+</operator><literal type="string">".txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>fileOut</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Pdb ID: "</literal><operator>+</operator><name>pdbID</name><operator>+</operator><literal type="string">", Number of Atoms: "</literal><operator>+</operator><call><name><name>atoms</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>Iterator</name></type> <name>i</name> <init>= <expr><call><name><name>atoms</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>
	    	<expr_stmt><expr><call><name><name>fileOut</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>i</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><call><name><name>fileOut</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block><catch>catch<parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list><block>{<block_content><expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></catch></try>
    </block_content>}</block></function>
</unit>
