<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/473827.java">	<function><type><specifier>public</specifier> <name>void</name></type> <name>testCommandOptions1</name><parameter_list>()</parameter_list> <block>{<block_content>

		<decl_stmt><decl><type><name>Options</name></type> <name>options</name> <init>= <expr><operator>new</operator> <call><name>Options</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>Option</name></type> <name>option</name> <init>= <expr><operator>new</operator> <call><name>Option</name><argument_list>(<argument><expr><literal type="string">"m"</literal></expr></argument>, <argument><expr><literal type="string">"module-name"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"The module name for the command."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>addOption</name></name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>CommandLineParser</name></type> <name>parser</name> <init>= <expr><operator>new</operator> <call><name>PosixParser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"-m"</literal></expr>, <expr><literal type="string">"AAA"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"AAA"</literal></expr></argument>, <argument><expr><call><name><name>options</name><operator>.</operator><name>getOption</name></name><argument_list>(<argument><expr><literal type="string">"m"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ParseException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></catch></try>
	</block_content>}</block></function>
</unit>
