<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/4297798.java">	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>validateFinal_hasIncoming</name><parameter_list>(<parameter><decl><type><name>Final</name></type> <name>final_</name></decl></parameter>, <parameter><decl><type><name>DiagnosticChain</name></type> <name>diagnostics</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name><name>final_</name><operator>.</operator><name>getIncoming</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>diagnostics</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name><name>diagnostics</name><operator>.</operator><name>add</name></name>
					<argument_list>(<argument><expr><call><name>createDiagnostic</name>
						<argument_list>(<argument><expr><name><name>Diagnostic</name><operator>.</operator><name>WARNING</name></name></expr></argument>,
						 <argument><expr><name>DIAGNOSTIC_SOURCE</name></expr></argument>,
						 <argument><expr><literal type="number">0</literal></expr></argument>,
						 <argument><expr><literal type="string">"_UI_GenericConstraint_diagnostic"</literal></expr></argument>,
						 <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><literal type="string">"Final state should have an incoming transition"</literal></expr>, <expr><call><name>getObjectLabel</name><argument_list>(<argument><expr><name>final_</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>,
						 <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><name>final_</name></expr> }</block></expr></argument>,
						 <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	</block_content>}</block></function>
</unit>
