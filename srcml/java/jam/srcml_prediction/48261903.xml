<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/31702483.java">	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>fill</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name>boolean</name></type> <name>link</name> <init>= <expr><call><name>link</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>boolean</name></type> <name>meta</name> <init>= <expr><call><name>meta</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if<condition>(<expr><name>depth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>Iterator</name></type> <name>it</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>link</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

			<while>while<condition>(<expr><call><name><name>it</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>Node</name></type> <name>node</name> <init>= <expr><operator>(</operator><name>Node</name><operator>)</operator> <call><name><name>it</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

				<comment type="line">// TODO: Cache</comment>

				<expr_stmt><expr><name>link</name> <operator>=</operator> <call><name><name>node</name><operator>.</operator><name>fill</name></name><argument_list>(<argument><expr><operator>--</operator><name>depth</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></while>
		</block_content>}</block></if></if_stmt>

		<return>return <expr><name>link</name> <operator>&amp;&amp;</operator> <name>meta</name></expr>;</return>
	</block_content>}</block></function>
</unit>
