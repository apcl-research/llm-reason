<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/131399.java">	<function><type><specifier>private</specifier> <name>void</name></type> <name>changeChildCloudIterativeLevels</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>deltaLevel</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<for>for <control>(<init><decl><type><name>ListIterator</name></type> <name>e</name> <init>= <expr><call><name>childrenUnfolded</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>e</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr/>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>NodeAdapter</name></type> <name>childNode</name> <init>= <expr><operator>(</operator><name>NodeAdapter</name><operator>)</operator><call><name><name>e</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>MindMapCloud</name></type> <name>childCloud</name> <init>= <expr><call><name><name>childNode</name><operator>.</operator><name>getCloud</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>childCloud</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name><name>childCloud</name><operator>.</operator><name>changeIterativeLevel</name></name><argument_list>(<argument><expr><name>deltaLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name><name>childNode</name><operator>.</operator><name>changeChildCloudIterativeLevels</name></name><argument_list>(<argument><expr><name>deltaLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></function>
</unit>
