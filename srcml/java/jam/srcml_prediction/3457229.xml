<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/31144096.java">	<function><type><specifier>protected</specifier> <name>List</name></type> <name>convertViewListFromJGroups</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{<block_content>
    	
		<decl_stmt><decl><type><name>List</name></type> <name>res</name> <init>= <expr><operator>new</operator> <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
		<if_stmt><if>if<condition>( <expr><name>view</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition><block type="pseudo"><block_content>
			<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
			
		<decl_stmt><decl><type><name>List</name></type> <name>jgroupsList</name> <init>= <expr><call><name><name>view</name><operator>.</operator><name>getMembers</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<for>for <control>(<init><decl><type><name>Iterator</name></type> <name>iter</name> <init>= <expr><call><name><name>jgroupsList</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>iter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name><name>replica</name><operator>.</operator><name>group</name><operator>.</operator><name>IpAddress</name></name></type> <name>addr</name> <init>= 
				<expr><call><name>convertJGroupsIpAddressToIpAddress</name><argument_list>( <argument><expr><operator>(</operator><name>IpAddress</name><operator>)</operator><call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
            
			<expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		
		<return>return <expr><name>res</name></expr>;</return>
	</block_content>}</block></function>
</unit>
