<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/19087118.java">	<function><type><specifier>public</specifier> <name>TreeNode</name></type> <name>createNewNode</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>TreeNode</name></type> <name>t</name> <init>= <expr><call><name><name>SyntaxTree</name><operator>.</operator><name>makeNewNode</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name><name>token</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Token</name><operator>.</operator><name>TokenType</name><operator>.</operator><name>BEGIN</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>beginFirst</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>token</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Token</name><operator>.</operator><name>TokenType</name><operator>.</operator><name>END</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>endFirst</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>tryMatch</name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>t</name></expr>;</return>
	</block_content>}</block></function>
</unit>
