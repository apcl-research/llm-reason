<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/36949073.java">	<function><type><specifier>public</specifier> <name>RubyModule</name></type> <name>getOrCreateModule</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>IRubyObject</name></type> <name>module</name> <init>= <expr><call><name><name>objectClass</name><operator>.</operator><name>getConstantAt</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>module</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>module</name> <operator>=</operator> <call><name>defineModule</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>getSafeLevel</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
			<throw>throw <expr><call><name>newSecurityError</name><argument_list>(<argument><expr><literal type="string">"Extending module proportion."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name><name>module</name><operator>.</operator><name>isModule</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
			<throw>throw <expr><call><name>newTypeError</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="string">" is not a Module"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>

		<return>return <expr><operator>(</operator><name>RubyModule</name><operator>)</operator> <name>module</name></expr>;</return>
	</block_content>}</block></function>
</unit>
