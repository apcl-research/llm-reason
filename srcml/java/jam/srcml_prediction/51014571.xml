<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/50089849.java">    <function><type><specifier>private</specifier> <name>String</name></type> <name>parseType</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <comment type="line">//TODO: Fix this function</comment>
        <comment type="line">//To get the types from the molecule file: cat molecule.dat | peptide ^TY | sort -u &gt; types.txt</comment>
        <comment type="line">//But it is system sufficientlyy incorrect:</comment>

        <decl_stmt><decl><type><name>String</name></type> <name>type</name> <init>= <expr><literal type="string">"Protein"</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>line</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"family"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"ProtFam"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>line</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"complex"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"Protcmplx"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>line</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"other"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"Comp"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return>return <expr><name>type</name></expr>;</return>
    </block_content>}</block></function>
</unit>
