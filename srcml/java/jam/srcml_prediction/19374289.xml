<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/37489983.java">	<function><type><specifier>public</specifier> <name>Set</name></type> <name>getTransitions</name><parameter_list>(<parameter><decl><type><name>StateGraphEvent</name></type> <name>ev</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>Set</name></type> <name>trans</name> <init>= <expr><operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>Iterator</name></type> <name>i</name> <init>= <expr><call><name>getAllTransitions</name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>SCharTransition</name></type> <name>tr</name> <init>= <expr><operator>(</operator><name>SCharTransition</name><operator>)</operator><call><name><name>i</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try>try <block>{<block_content>
				<decl_stmt><decl><type><name>SCharEvent</name></type> <name>tev</name> <init>= <expr><operator>(</operator><name>SCharEvent</name><operator>)</operator> <call><name><name>tr</name><operator>.</operator><name>getEvent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<comment type="line">//if (tev.getTrigger().equals(ev)) trans.add(tr);</comment>
				<if_stmt><if>if <condition>(<expr><call><name><name>tev</name><operator>.</operator><name>getTrigger</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>ev</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>trans</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ClassCastException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
				
			</block_content>}</block></catch></try>
		</block_content>}</block></for>
		<return>return <expr><name>trans</name></expr>;</return>
	</block_content>}</block></function>
</unit>
