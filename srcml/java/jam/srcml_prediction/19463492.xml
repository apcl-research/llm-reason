<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/19509094.java">	<function><type><specifier>private</specifier> <name>boolean</name></type> <name>boundIdentDecsMatch</name><parameter_list>(<parameter><decl><type><name><name>BoundIdentDecl</name><index>[]</index></name></type> <name>formulaDecs</name></decl></parameter>, <parameter><decl><type><name><name>BoundIdentDecl</name><index>[]</index></name></type> <name>patternDecs</name></decl></parameter>)</parameter_list><block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>formulaDecs</name><operator>.</operator><name>length</name></name> <operator>==</operator> <name><name>patternDecs</name><operator>.</operator><name>length</name></name></expr>)</condition><block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>BoundIdentDecl</name></type> <name>pDec</name><range>: <expr><name>patternDecs</name></expr></range></decl></init>)</control><block>{<block_content>
				<decl_stmt><decl><type><name>BoundIdentDecl</name></type> <name>fDec</name> <init>= <expr><name><name>formulaDecs</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>ProverUtilities</name><operator>.</operator><name>canUnifyTypes</name></name><argument_list>(<argument><expr><call><name><name>fDec</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pDec</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
					<return>return <expr><literal type="boolean">false</literal></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></for>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content> 
			<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></function>
</unit>
