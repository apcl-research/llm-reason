<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/13582996.java">	<function><type><specifier>private</specifier> <name>void</name></type> <name>buildPath</name><parameter_list>(<parameter><decl><type><name>Vertex</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>Vertex</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Vertex</name></argument>, <argument><name>Vertex</name></argument>&gt;</argument_list></name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Vertex</name></argument>&gt;</argument_list></name></type> <name>result</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument></throws> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>from</name> <operator>==</operator> <name>to</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<decl_stmt><decl><type><name>Vertex</name></type> <name>pv</name> <init>= <expr><call><name><name>p</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>pv</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
				<throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"No path found"</literal></expr></argument>)</argument_list></call></expr>;</throw>
			</block_content>}</block></if></if_stmt>
			<comment type="line">// recurse</comment>
			<expr_stmt><expr><call><name>buildPath</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>pv</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></function>
</unit>
