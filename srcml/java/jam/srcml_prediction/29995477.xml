<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/13590029.java">	<function><type><specifier>private</specifier> <name>Time</name></type> <name>simulate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SimulationException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name>Time</name></type> <name>current</name> <init>= <expr><call><name>startSimulation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name><name>endTime</name><operator>.</operator><name>isLT</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<throw>throw <expr><operator>new</operator> <call><name>SimulationException</name><argument_list>(<argument><expr><literal type="string">"Requested time "</literal> <operator>+</operator> <name>endTime</name>
						<operator>+</operator> <literal type="string">" is smaller than current time "</literal> <operator>+</operator> <name>current</name> <operator>+</operator> <literal type="string">"!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
			</block_content>}</block></if></if_stmt>
			<while>while <condition>(<expr><call><name>isRunning</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name><name>current</name><operator>.</operator><name>isGE</name></name><argument_list>(<argument><expr><name>endTime</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
					<break>break;</break> <comment type="line">// The requested end time has been reached</comment>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>continueSimulation</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>endTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>yield</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></while>
		</block_content>}</block> <finally>finally <block>{<block_content>
			<expr_stmt><expr><call><name>finishSimulation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></finally></try>
		<return>return <expr><call><name>currentTime</name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>
</unit>
