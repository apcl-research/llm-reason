<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/42692696.java">	<function><type><specifier>private</specifier> <name>void</name></type> <name>collectValue</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>token</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>TreeException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>blank</name> <init>= <expr><call><name><name>token</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>blank</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>blank</name> <operator>&gt;</operator> <operator>(</operator><call><name><name>token</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>TreeException</name><argument_list>(<argument><expr><literal type="string">"Could not find a blank in '"</literal> <operator>+</operator> <name>token</name>
					<operator>+</operator> <literal type="string">"' !"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><call><name><name>token</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>blank</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name><name>token</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>blank</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>node</name><argument_list>(<argument><expr><name>CHILD</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>node</name><argument_list>(<argument><expr><name>CHILD</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>reduceLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
</unit>
