<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/426926.java">	<function><type><specifier>public</specifier> <name>void</name></type> <name>markStart</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>tag</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<synchronized>synchronized <init>(<expr><name>pair2startTimeMap</name></expr>)</init> <block>{<block_content>
			<expr_stmt><expr><call><name><name>pair2startTimeMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><call><name><name>clock</name><operator>.</operator><name>getCurrentTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// FIXME it probably makes more sense to run the garbage collection</comment>
			<comment type="line">// sufficiently instead of allocating the timer every time</comment>
			<decl_stmt><decl><type><name>Timer</name></type> <name>removalTimer</name> <init>= <expr><call><name><name>clock</name><operator>.</operator><name>createNewTimer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>removalTimer</name><operator>.</operator><name>addTimerListener</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GarbageCollectionTimerListener</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>removalTimer</name><operator>.</operator><name>schedule</name></name><argument_list>(<argument><expr><call><name><name>Time</name><operator>.</operator><name>inMilliseconds</name></name><argument_list>(<argument><expr><name>maxWait</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></synchronized>
	</block_content>}</block></function>
</unit>
