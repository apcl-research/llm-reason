<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/13489983.java">	<function><type><specifier>public</specifier> <name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>PrintStream</name></type> <name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name>type</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>isDirty</name></expr> ?</condition><then> <expr><literal type="string">" (dirty) "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Iterator</name></type> <name>iter</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name><name>code</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<while>while <condition>(<expr><call><name><name>iter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"    "</literal> <operator>+</operator> <call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>

		<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name><name>tryCatches</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<while>while <condition>(<expr><call><name><name>iter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"    "</literal> <operator>+</operator> <call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></function>
</unit>
