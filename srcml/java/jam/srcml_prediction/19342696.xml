<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/42579915.java">	<function><type><specifier>private</specifier> <name>String</name></type> <name>readFile</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fileName</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<comment type="line">//ArrayList&lt;String&gt; lines = new ArrayList&lt;String&gt;();</comment>
		<decl_stmt><decl><type><name>StringBuffer</name></type> <name>ret</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> 
		<decl_stmt><decl><type><name>String</name></type> <name>s</name></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>BufferedReader</name></type> <name>r</name> <init>= <expr><operator>new</operator> <call><name>BufferedReader</name><argument_list>(<argument><expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<while>while <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name><name>r</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				
		<return>return <expr><call><name><name>ret</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
	<comment type="line">//	InputS</comment>
	</block_content>}</block></function>
</unit>
