<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/38894240.java">	<function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>StringBuffer</name></type> <name>buf</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>(<argument><expr><literal type="string">"EncryptionException\nThis is a wrapper for any exception that is thrown in the course of encryption or decryption of data.\n"</literal></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>details</name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"\n\nSource Exception: "</literal></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>wrappedException</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <call><name><name>wrappedException</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>buf</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Root Cause: \n"</literal></expr></argument>)</argument_list></call>
					<operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>wrappedException</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><call><name><name>buf</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>
</unit>
