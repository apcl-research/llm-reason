<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/13489983.java">	<function><type><specifier>public</specifier> <name>void</name></type> <name>replace</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Expr</name></type> <name>expr</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>stack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><specifier>final</specifier> <name>Expr</name></type> <name>top</name> <init>= <expr><operator>(</operator><name>Expr</name><operator>)</operator> <call><name><name>stack</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>depth</name> <operator>-=</operator> <call><name><name>top</name><operator>.</operator><name>type</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stackHeight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Can't replace below stack bottom."</literal></expr></argument>)</argument_list></call></expr>;</throw>
	</block_content>}</block></function>
</unit>
