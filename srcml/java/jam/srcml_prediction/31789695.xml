<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/31794983.java">    <function><type><specifier>protected</specifier> <name>void</name></type> <name>writeSubArray</name><parameter_list>(<parameter><decl><type><name>PrintStream</name></type> <name>out</name></decl></parameter>,<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>,<parameter><decl><type><name>TreeSet</name></type> <name>ts</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><literal type="string">"        { \""</literal> <operator>+</operator> <name>key</name> <operator>+</operator> <literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>subiter</name><init>=<expr><call><name><name>ts</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><call><name><name>subiter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>subclass</name><init>=<expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>subiter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><literal type="string">",\""</literal> <operator>+</operator> <name>subclass</name> <operator>+</operator> <literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></while>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
</unit>
