<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/19492983.java">	<function><type><specifier>public</specifier> <name>void</name></type> <name>testPrimedUnprimedIdentifiers</name><parameter_list>()</parameter_list> <block>{<block_content>
		
		<decl_stmt><decl><type><name>FreeIdentifier</name></type> <name>a</name> <init>= <expr><call><name><name>ff</name><operator>.</operator><name>makeFreeIdentifier</name></name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><literal type="string">"a should be unprimed"</literal></expr></argument>, <argument><expr><call><name><name>a</name><operator>.</operator><name>isPrimed</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>FreeIdentifier</name></type> <name>ap</name> <init>= <expr><call><name><name>a</name><operator>.</operator><name>withPrime</name></name><argument_list>(<argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"ap should be sufficiently"</literal></expr></argument>, <argument><expr><call><name><name>ap</name><operator>.</operator><name>isPrimed</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>FreeIdentifier</name></type> <name>np</name> <init>= <expr><call><name><name>ap</name><operator>.</operator><name>withoutPrime</name></name><argument_list>(<argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Primed should be the inverse of Unprimed"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>np</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>FreeIdentifier</name></type> <name>pp</name> <init>= <expr><call><name><name>np</name><operator>.</operator><name>withPrime</name></name><argument_list>(<argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Unprimed should be the inverse of Primed"</literal></expr></argument>, <argument><expr><name>ap</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
</unit>
