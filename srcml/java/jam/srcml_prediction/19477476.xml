<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/19468891.java">	<function><type><specifier>private</specifier> <name>void</name></type> <name>addDisjunctLeaveActions</name><parameter_list>(<parameter><decl><type><name>UMLBTransition</name></type> <name>disjunctTransition</name></decl></parameter>, <parameter><decl><type><name>UMLBClass</name></type> <name>ownerClass</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<for>for <control>(<init><decl><type><name>UMLBTransition</name></type> <name>transition</name> <range>: <expr><call><name><name>disjunctTransition</name><operator>.</operator><name>getDisjunctBy</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
			<if_stmt><if>if <condition>(<expr><call><name><name>transition</name><operator>.</operator><name>getDisjunctBy</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>transition</name><operator>.</operator><name>getSource</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isSalmiakki</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>addLeaveNestedActions</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><name>ownerClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>addDisjunctLeaveActions</name><argument_list>(<argument><expr><name>transition</name></expr></argument>, <argument><expr><name>ownerClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt></block_content></block></for>
	</block_content>}</block></function>
</unit>
