<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/26352783.java">    <function><type><specifier>private</specifier> <name>ScalarMap</name></type> <name>findMapByType</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DisplayRealType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name>ScalarMap</name></type> <name>scalarMap</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>iterator</name> <init>= <expr><call><name><name>display</name><operator>.</operator><name>getMapVector</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</init>
             <condition><expr><name>scalarMap</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>iterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr/>)</control> <block>{<block_content>
            <decl_stmt><decl><type><specifier>final</specifier> <name>ScalarMap</name></type> <name>map</name> <init>= <expr><operator>(</operator><name>ScalarMap</name><operator>)</operator> <call><name><name>iterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>map</name><operator>.</operator><name>getDisplayScalar</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>scalarMap</name> <operator>=</operator> <name>map</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>scalarMap</name></expr>;</return>
    </block_content>}</block></function>
</unit>
