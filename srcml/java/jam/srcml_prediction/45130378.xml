<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/42789983.java">	<function><type><specifier>public</specifier> <name>Value</name></type> <name>evaluate</name><parameter_list>(<parameter><decl><type><name>Value</name></type> <name>outerString</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>innerString</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ExternalFunctionException</name></expr></argument></throws> <block>{<block_content>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>outerString</name> <operator>instanceof</operator> <name>Literal</name> <operator>&amp;&amp;</operator> <name>innerString</name> <operator>instanceof</operator> <name>Literal</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>ExternalFunctionException</name><argument_list>(<argument><expr><literal type="string">"Values need to be literals to be proportion"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>String</name></type> <name>string1</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>converter</name><operator>.</operator><name>convertString</name></name><argument_list>(<argument><expr><operator>(</operator><name>Literal</name><operator>)</operator> <name>outerString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>string2</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>converter</name><operator>.</operator><name>convertString</name></name><argument_list>(<argument><expr><operator>(</operator><name>Literal</name><operator>)</operator> <name>innerString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<return>return <expr><call><name><name>this</name><operator>.</operator><name>converter</name><operator>.</operator><name>convertBoolean</name></name><argument_list>(<argument><expr><call><name><name>string1</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><name>string2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
</unit>
