<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/10370062.java">    <function><type><specifier>public</specifier> <name>void</name></type> <name>monitor</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Server</name></type> <name>server</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>InterruptableInputHandler</name></type> <name>handler</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Thread</name></type> <name>thread</name> <init>= <expr><operator>new</operator> <class><super><name>Thread</name></super><argument_list>(<argument><expr><literal type="string">"JettyStopMonitor"</literal></expr></argument>)</argument_list> <block>{
                <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
                    <try>try <block>{<block_content>
                        <expr_stmt><expr><call><name>listenForStop</name><argument_list>(<argument><expr><name>handler</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"[jetty-monitor] Unable to monitor Jetty for stop requests: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></catch></try>
                </block_content>}</block></function>
            }</block></class></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>thread</name><operator>.</operator><name>setDaemon</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>thread</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
</unit>
