<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/19509073.java">	<function><type><specifier>public</specifier> <name>void</name></type> <name>checkOpenDescendants</name><parameter_list>(<parameter><decl><type><name>IProofTreeNode</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name><name>IProofTreeNode</name><index>[]</index></name></type> <name>openDescendants</name> <init>= <expr><call><name><name>node</name><operator>.</operator><name>getOpenDescendants</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>IProofTreeNode</name></type> <name>firstOpenDescendant</name> <init>= <expr><call><name><name>node</name><operator>.</operator><name>getFirstOpenDescendant</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>openDescendants</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><name>firstOpenDescendant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><name>firstOpenDescendant</name></expr></argument>, <argument><expr><name><name>openDescendants</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>IProofTreeNode</name></type> <name>openDescendant</name> <range>: <expr><name>openDescendants</name></expr></range></decl></init>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>assertNodeOpen</name><argument_list>(<argument><expr><name>openDescendant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assertAncestor</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>openDescendant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></function>
</unit>
