<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/18149983.java">	<function><type><specifier>private</specifier> <name>void</name></type> <name>setContainsNonTerminal</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>_conatinsNonTerminal</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>_symbol_types</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>_symbol_types</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>_conatinsNonTerminal</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><name>_conatinsNonTerminal</name> <operator>=</operator> <name><name>_symbol_types</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>is_nonterminal</name></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>_symbols</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>_conatinsNonTerminal</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><name>_conatinsNonTerminal</name> <operator>=</operator> <operator>(</operator><name><name>_symbols</name><index>[<expr><name>i</name></expr>]</index></name> <operator>instanceof</operator> <name>NonTerminal</name><operator>)</operator></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></function>
</unit>
