<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/40602783.java">  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isValid</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>TypeOracleException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>TreeLogger</name></type> <name>logger</name> <init>= <expr><call><name><name>rootLogger</name><operator>.</operator><name>branch</name></name><argument_list>(<argument><expr><name><name>TreeLogger</name><operator>.</operator><name>SPAM</name></name></expr></argument>,
      <argument><expr><literal type="string">"Validating service interface '"</literal> <operator>+</operator> <call><name><name>serviceIntf</name><operator>.</operator><name>getQualifiedSourceName</name></name><argument_list>()</argument_list></call>
        <operator>+</operator> <literal type="string">"'"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>typeToFinalInstanceFieldCache</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>validServiceInterface</name><argument_list>(<argument><expr><name>logger</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>validAsyncServiceInterface</name><argument_list>(<argument><expr><name>logger</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>
</unit>
