<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/51011715.java">	<function><type><specifier>private</specifier> <name>void</name></type> <name>annotateNodes</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ONDEXConcept</name></argument>, <argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>map</name></decl></parameter>)</parameter_list> <block>{<block_content>

		<decl_stmt><decl><type><name>AttributeName</name></type> <name>an</name> <init>= <expr><call><name><name>graph</name><operator>.</operator><name>getMetaData</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFactory</name><argument_list>()</argument_list></call>
				<operator>.</operator><call><name>createAttributeName</name><argument_list>(<argument><expr><literal type="string">"Betweenness_centrality"</literal></expr></argument>, <argument><expr><name><name>Double</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// scale node size according to percentage</comment>
		<for>for <control>(<init><decl><type><name>ONDEXConcept</name></type> <name>c</name> <range>: <expr><call><name><name>map</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>Double</name></type> <name>percentBase</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><call><name><name>c</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name>an</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>createAttribute</name></name><argument_list>(<argument><expr><name>an</name></expr></argument>, <argument><expr><name>percentBase</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name>an</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setValue</name><argument_list>(<argument><expr><name>percentBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></function>
</unit>
