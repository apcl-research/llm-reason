<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/13489983.java">	<function><type><specifier>public</specifier> <name>void</name></type> <name>addByte</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>ClassEditor</name><operator>.</operator><name>DEBUG</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"    "</literal> <operator>+</operator> <name>codeLength</name> <operator>+</operator> <literal type="string">": "</literal> <operator>+</operator> <literal type="string">"byte "</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// The bytecode array is represented as a linked list of</comment>
		<comment type="line">// ByteCells. This method creates a new ByteCell and appends it</comment>
		<comment type="line">// to the linked list.</comment>

		<decl_stmt><decl><type><specifier>final</specifier> <name>ByteCell</name></type> <name>p</name> <init>= <expr><operator>new</operator> <call><name>ByteCell</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>p</name><operator>.</operator><name>value</name></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>p</name><operator>.</operator><name>prev</name></name> <operator>=</operator> <name>codeTail</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>codeTail</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>codeLength</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></function>
</unit>
