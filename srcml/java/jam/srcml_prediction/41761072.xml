<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/46481529.java">	<function><type><specifier>private</specifier> <name>TreeNode</name></type> <name>parseExpressionList</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>TreeNode</name></type> <name>t</name> <init>= <expr><call><name>parseExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TreeNode</name></type> <name>p</name> <init>= <expr><name>t</name></expr></init></decl>;</decl_stmt>

		<while>while <condition>(<expr><call><name><name>token</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Token</name><operator>.</operator><name>TokenType</name><operator>.</operator><name>RPARENS</name></name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>TreeNode</name></type> <name>q</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>tryMatch</name><argument_list>(<argument><expr><name><name>Token</name><operator>.</operator><name>TokenType</name><operator>.</operator><name>SEP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>parseExpression</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>q</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>t</name> <operator>=</operator> <name>p</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
				</block_content>}</block></if> <else>else <block>{<block_content>
					<expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setSibling</name></name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></while>

		<return>return <expr><name>t</name></expr>;</return>
	</block_content>}</block></function>
</unit>
