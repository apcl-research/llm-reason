<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/13991596.java">    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DiscreteMapping</name></type> <name>clone</name> <init>= <expr><operator>new</operator> <call><name>DiscreteMapping</name>
                <argument_list>(<argument><expr><name>defaultObj</name></expr></argument>, <argument><expr><name>attrName</name></expr></argument>, <argument><expr><name>mapType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">//  Copy over all listeners...</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>observers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>clone</name><operator>.</operator><name>addChangeListener</name></name><argument_list>(<argument><expr><operator>(</operator><name>ChangeListener</name><operator>)</operator> <call><name><name>observers</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>clone</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><operator>(</operator><name>TreeMap</name><operator>)</operator> <call><name><name>treeMap</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>clone</name></expr>;</return>
    </block_content>}</block></function>
</unit>
