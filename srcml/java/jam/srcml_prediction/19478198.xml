<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/19494883.java">	<function><type><specifier>public</specifier> <name>void</name></type> <name>removeComposedMachine</name><parameter_list>(<parameter><decl><type><name>IComposedMachineRoot</name></type> <name>machineRoot</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>ModelComposesMachine</name></type> <name>machine</name> <init>= <expr><call><name><name>composedMachines</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>machineRoot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>machine</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>removeComposedMachineDependencies</name><argument_list>(<argument><expr><name>machine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">//other machines also can't compensate this machine anymore, because it won't exist any longer</comment>
<comment type="line">//			for(ModelMachine machines : machine.getRefinedByMachines()) {</comment>
<comment type="line">//				mach.removeRefinesMachine(machine);</comment>
<comment type="line">//			}</comment>
			<expr_stmt><expr><call><name><name>composedMachines</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>machineRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>
</unit>
