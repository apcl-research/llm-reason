<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/19509073.java">	<function><type><specifier>public</specifier> <name>void</name></type> <name>assertNodePending</name><parameter_list>(<parameter><decl><type><name>IProofTreeNode</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>assertNotEmpty</name><argument_list>(<argument><expr><call><name><name>node</name><operator>.</operator><name>getChildNodes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><call><name><name>node</name><operator>.</operator><name>getFirstOpenDescendant</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assertNotSame</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><call><name><name>node</name><operator>.</operator><name>getFirstOpenDescendant</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><call><name><name>node</name><operator>.</operator><name>getOpenDescendants</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><call><name><name>node</name><operator>.</operator><name>getRule</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>node</name><operator>.</operator><name>hasChildren</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>node</name><operator>.</operator><name>isClosed</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>node</name><operator>.</operator><name>isOpen</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
</unit>
