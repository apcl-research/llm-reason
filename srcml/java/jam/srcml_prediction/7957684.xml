<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/cmc/dev/projects/datasets/18440062.java">	<function><type><specifier>private</specifier> <name>Node</name></type> <name>findNode</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><specifier>final</specifier> <name>Stack</name></type> <name>stack</name> <init>= <expr><operator>new</operator> <call><name>Stack</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Find the child of the root element.</comment>
		<while>while <condition>(<expr><name><name>node</name><operator>.</operator><name>parent</name><operator>.</operator><name>child</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>.</operator><name>parent</name></name></expr>;</expr_stmt>
		</block_content>}</block></while>

		<comment type="line">// Do path compression on the way back down.</comment>
		<decl_stmt><decl><type><specifier>final</specifier> <name>Node</name></type> <name>rootChild</name> <init>= <expr><name>node</name></expr></init></decl>;</decl_stmt>

		<while>while <condition>(<expr><operator>!</operator><call><name><name>stack</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>Node</name><operator>)</operator> <call><name><name>stack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>node</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name>rootChild</name></expr>;</expr_stmt>
		</block_content>}</block></while>

		<expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>isTrue</name></name><argument_list>(<argument><expr><name><name>rootChild</name><operator>.</operator><name>parent</name><operator>.</operator><name>child</name></name> <operator>!=</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name><name>rootChild</name><operator>.</operator><name>parent</name></name></expr>;</return>
	</block_content>}</block></function>
</unit>
